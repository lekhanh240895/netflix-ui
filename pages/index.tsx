import Head from 'next/head';
import { useEffect } from 'react';
import { useSelector } from 'react-redux';
import Banner from '../components/Banner';
import Header from '../components/Header';
import Row from '../components/Row';
import VideoModal from '../components/VideoModal';
import { appSelector } from '../redux/selector';
import { IList, IUser, Movie } from '../typings';
import requests from '../utils/request';
import { useRouter } from 'next/router';
import useSWR, { Fetcher } from 'swr';
import { setMyList } from '../features/appSlice';
import { useAppDispatch } from '../hooks/hooks';
import { useAuth } from '../context/AuthContext';

interface Props {
    netflixOriginals: Movie[];
    topRated: Movie[];
    actionMovies: Movie[];
    comedyMovies: Movie[];
    horrorMovies: Movie[];
    romanceMovies: Movie[];
    documentaries: Movie[];
    trendingNow: Movie[];
    user: IUser;
}

export default function Home({
    netflixOriginals,
    trendingNow,
    topRated,
    actionMovies,
    comedyMovies,
    horrorMovies,
    romanceMovies,
    documentaries,
}: Props) {
    const { videoModalShow, myList } = useSelector(appSelector);

    const { loading } = useAuth();
    const router = useRouter();
    const dispatch = useAppDispatch();

    const fetcher: Fetcher<IUser, string> = (path) =>
        fetch(path).then((res) => res.json());

    const { data: user, error } = useSWR<IUser, Error>(
        '/api/users/getMe',
        fetcher,
    );

    useEffect(() => {
        if (user && !user.is_sub) {
            router.push('/planform');
        }
    }, [user, router]);

    const listFetcher: Fetcher<IList, string> = (path) =>
        fetch(path).then((res) => res.json());

    const { data: list } = useSWR<IList, Error>(
        user?._id ? `/api/list/${user._id}` : null,
        listFetcher,
    );

    useEffect(() => {
        if (typeof list !== 'undefined' && list && list?.movies?.length > 0) {
            dispatch(setMyList(list?.movies));
        }
    }, [list, dispatch]);

    if (loading || !user?.is_sub) return null;

    return (
        <div
            className={`relative h-screen bg-gradient-to-b lg:h-[140vh] max-w-[100vw] ${
                videoModalShow && 'lg:h-screen overflow-hidden scrollbar-hide'
            }`}
        >
            <Head>
                <title>Netflix</title>
                <meta
                    name="description"
                    content="Generated by create next app"
                />
                <link rel="icon" href="/nficon2016.ico" />
            </Head>

            {/* Header */}
            <Header />

            <main className="relative pl-4 md:pl-4 pb-24 lg:space-y-14 lg:pl-16 pt-14">
                {/* Banner */}
                <Banner netflixOriginals={netflixOriginals} />

                <section className="space-y-2 md:space-y-4">
                    {/* Row */}
                    <Row title="Trending Now" movies={trendingNow} />
                    <Row title="Top Rated" movies={topRated} />
                    <Row title="Action Thrillers" movies={actionMovies} />

                    {/* My List */}
                    {myList.length > 0 && (
                        <Row title="My List" movies={myList} />
                    )}

                    <Row title="Comedies" movies={comedyMovies} />
                    <Row title="Scary Movies" movies={horrorMovies} />
                    <Row title="Romance Movies" movies={romanceMovies} />
                    <Row title="Documentaries" movies={documentaries} />
                </section>

                {/* VideoModal */}
                {videoModalShow && <VideoModal />}
            </main>
        </div>
    );
}

export async function getStaticProps() {
    const [
        netflixOriginals,
        trendingNow,
        topRated,
        actionMovies,
        comedyMovies,
        horrorMovies,
        romanceMovies,
        documentaries,
    ] = await Promise.all([
        fetch(requests.fetchNetflixOriginals).then((res) => res.json()),
        fetch(requests.fetchTrending).then((res) => res.json()),
        fetch(requests.fetchTopRated).then((res) => res.json()),
        fetch(requests.fetchActionMovies).then((res) => res.json()),
        fetch(requests.fetchComedyMovies).then((res) => res.json()),
        fetch(requests.fetchHorrorMovies).then((res) => res.json()),
        fetch(requests.fetchRomanceMovies).then((res) => res.json()),
        fetch(requests.fetchDocumentaries).then((res) => res.json()),
    ]);

    return {
        props: {
            netflixOriginals: netflixOriginals.results,
            trendingNow: trendingNow.results,
            topRated: topRated.results,
            actionMovies: actionMovies.results,
            comedyMovies: comedyMovies.results,
            horrorMovies: horrorMovies.results,
            romanceMovies: romanceMovies.results,
            documentaries: documentaries.results,
        }, // will be passed to the page component as props
        revalidate: 3600,
    };
}
