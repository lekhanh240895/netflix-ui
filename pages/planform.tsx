import { CheckIcon } from '@heroicons/react/24/solid';
import Head from 'next/head';
import Image from 'next/image';
import Link from 'next/link';
import { useState } from 'react';
import Table from '../components/Table';
import { Plan } from '../typings';
import { fetchPostJSON } from '../utils/api-helpers';
import getStripe from '../utils/get-stripesjs';
import Stripe from 'stripe';
import { deleteCookie } from 'cookies-next';
import { useRouter } from 'next/router';

interface Props {
    plans: Plan[];
}

function PlanForm({ plans }: Props) {
    const [selectedPlan, setSelectedPlan] = useState<Plan | null>(
        plans[plans.length - 1],
    );
    const router = useRouter();

    const handleSignOut = async () => {
        /* Custom Authentication */
        deleteCookie('token');
        router.push('/login');
    };

    const handleClick = async () => {
        const response = await fetchPostJSON('/api/subscription', {
            priceId: selectedPlan?.id,
        });

        if (response.statusCode === 500) {
            console.error(response.message);
            return;
        }

        const stripe = await getStripe();
        const { error } = await stripe!.redirectToCheckout({
            sessionId: response.id,
        });
        console.warn(error.message);
    };

    return (
        <div>
            <Head>
                <title>Netflix</title>
                <meta
                    name="description"
                    content="Generated by create next app"
                />
                <link rel="icon" href="/nficon2016.ico" />
            </Head>

            <header className="h-12 py-0 md:h-24 border-b border-b-gray-600 bg-[#181818]">
                <Link href="/" className="relative w-20 md:w-44 h-full">
                    <Image
                        alt="logo"
                        src="/Netflix-Brand-Logo.png"
                        className="object-cover"
                        fill
                        sizes="large"
                    />
                </Link>
                <a
                    className="text-medium md:text-xl font-medium hover:underline h-full flex items-center cursor-pointer"
                    onClick={handleSignOut}
                >
                    Log out
                </a>
            </header>

            <main className="relative p-4 md:pl-4 pb-24 lg:space-y-14 lg:pl-20 mt-12 md:mt-24 max-w-5xl mx-auto">
                <div className="mb-4">
                    <h5>Step 1/2</h5>
                    <h2>Chọn gói dịch vụ phù hợp với bạn</h2>
                    <ul className="mt-4 space-y-4">
                        <li className="flex flex-row items-center space-x-2">
                            <CheckIcon className="w-9 h-9" color="#e50914" />
                            <span>
                                Truy cập thêm nhiều chương trình truyền hình và
                                phim.
                            </span>
                        </li>
                        <li className="flex flex-row items-center space-x-2">
                            <CheckIcon className="w-9 h-9" color="#e50914" />
                            <span>Lựa chọn xem trên nhiều thiết bị hơn.</span>
                        </li>
                        <li className="flex flex-row items-center space-x-2">
                            <CheckIcon className="w-9 h-9" color="#e50914" />
                            <span>
                                Thay đổi hoặc hủy gói dịch vụ của bạn bất cứ khi
                                nào.
                            </span>
                        </li>
                    </ul>
                </div>

                {/* Products */}
                <div className="flex flex-col md:flex-row justify-end mb-4">
                    <div className="flex flex-row md:w-[60%]">
                        {plans.map((plan) => (
                            <div
                                className={`planBox ${
                                    selectedPlan?.id === plan.id
                                        ? 'opaicty-100'
                                        : ' opacity-70'
                                }`}
                                key={plan.id}
                                onClick={() => setSelectedPlan(plan)}
                            >
                                <span className="text-center font-semibold">
                                    {plan.name}
                                </span>
                            </div>
                        ))}
                    </div>
                </div>

                {/* Table */}
                <Table
                    plans={plans}
                    selectedPlan={selectedPlan}
                    setSelectedPlan={setSelectedPlan}
                />

                <p className="text-gray-400 text-sm my-4">
                    Việc bạn có thể xem ở chế độ HD (720p), Full HD (1080p),
                    Ultra HD (4K) và HDR hay không phụ thuộc vào dịch vụ
                    internet và khả năng của thiết bị. Không phải tất cả nội
                    dung đều có sẵn ở mọi độ phân giải. Xem Điều khoản sử dụng
                    của chúng tôi để biết thêm chi tiết.
                </p>
                <p className="text-gray-400 text-sm mb-4">
                    Chỉ những người sống cùng bạn mới có thể dùng tài khoản của
                    bạn. Xem trên 4 thiết bị khác nhau cùng lúc với gói Cao cấp,
                    2 với gói Tiêu chuẩn và 1 với gói Cơ bản và Di động.
                </p>

                <div className="text-center">
                    <button
                        className="w-full md:w-1/2 bg-primary px-10 py-5"
                        onClick={handleClick}
                    >
                        Tiếp theo
                    </button>
                </div>
            </main>
        </div>
    );
}

export default PlanForm;

export const getServerSideProps = async () => {
    const stripe = new Stripe(process.env.STRIPE_SECRET_KEY!, {
        // https://github.com/stripe/stripe-node#configuration
        apiVersion: '2022-11-15',
    });

    const { data: prices } = await stripe.prices.list();

    const plans = await Promise.all(
        prices.map(async (price) => {
            const product = await stripe.products.retrieve(
                price.product as string,
            );

            return {
                id: price.id,
                name: product.name,
                price: price.unit_amount,
                interval: price.recurring?.interval,
                currency: price.currency,
                quality: product.metadata.quality,
                resolution: product.metadata.resolution,
                devices: product.metadata.devices,
            };
        }),
    );

    return {
        props: {
            plans,
        },
    };
};
